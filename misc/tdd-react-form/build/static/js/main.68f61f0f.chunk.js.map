{"version":3,"sources":["service.ts","utils.ts","init.service.ts","state.refactored.service.ts","App.tsx","index.tsx"],"names":["Service","EventSubject","Subject","unboxInputEvent","e","target","value","OnChangeSubject","pipe","filter","type","OnClickSubject","OnFocusSubject","InitSubject","StateService","constructor","StateSubject","BehaviorSubject","getInput","id","this","getValue","find","_id","setInput","nextInput","newState","input","i","arr","indexOf","next","instance","undefined","resetInstance","getInstance","EventWrapper","props","children","childrenWithProps","React","map","child","onClick","preventDefault","onChange","onFocus","Form","inputs","key","style","flexDirection","disabled","isDisabled","error","color","App","subject","useState","setState","useEffect","sub","skip","subscribe","s","unsubscribe","state","useSharedState","className","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.68f61f0f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Subject } from \"rxjs\";\r\nimport { filter } from \"rxjs/operators\";\r\nimport { InitSubject } from \"./init.service\";\r\n\r\nexport interface IInput {\r\n  value: string;\r\n  error?: string;\r\n  isTouched: boolean;\r\n  id: string;\r\n  isDisabled?: boolean;\r\n}\r\n\r\nexport type EventType = \"click\" | \"change\" | \"focus\";\r\nexport type Id = string;\r\nexport type IEvent = [EventType, Id, string | undefined];\r\nexport const SubmitId = \"submit\";\r\n\r\nexport class Service {\r\n  static EventSubject = new Subject<IEvent>();\r\n\r\n  static unboxInputEvent = (\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ): string | undefined => e?.target?.value;\r\n\r\n  static OnChangeSubject = () =>\r\n    Service.EventSubject.pipe(filter(([type]) => type === \"change\")) as Subject<\r\n      IEvent\r\n    >;\r\n\r\n  static OnClickSubject = () =>\r\n    Service.EventSubject.pipe(filter(([type]) => type === \"click\")) as Subject<\r\n      IEvent\r\n    >;\r\n\r\n  static OnFocusSubject = () =>\r\n    Service.EventSubject.pipe(filter(([type]) => type === \"focus\")) as Subject<\r\n      IEvent\r\n    >;\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { skip } from \"rxjs/operators\";\r\n\r\nexport const useSharedState = <T>(\r\n  subject: BehaviorSubject<T>\r\n): [T, typeof useState] => {\r\n  const [value, setState] = useState<T>(subject.getValue());\r\n  useEffect(() => {\r\n    const sub = subject.pipe(skip(1)).subscribe((s) => setState(s));\r\n    return () => sub.unsubscribe();\r\n  }, [subject]);\r\n  const newSetState = (state: T) => subject.next(state);\r\n  // @ts-ignore\r\n  return [value, newSetState];\r\n};\r\n\r\nexport const setPartial = <T>(\r\n  subject: BehaviorSubject<T>,\r\n  partial: Partial<T>\r\n) => {\r\n  const prev = subject.getValue();\r\n  subject.next({ ...prev, ...partial });\r\n};\r\n","import { Subject } from \"rxjs\";\r\n\r\nexport const InitSubject = new Subject();\r\n","import { BehaviorSubject } from \"rxjs\";\r\nimport { IInput } from \"./service\";\r\n\r\nexport class StateService {\r\n  private static instance: StateService | undefined = undefined;\r\n\r\n  static resetInstance = () => {\r\n    StateService.instance = undefined;\r\n  };\r\n\r\n  static getInstance = () => {\r\n    if (!StateService.instance) StateService.instance = new StateService();\r\n    return StateService.instance;\r\n  };\r\n\r\n  StateSubject = new BehaviorSubject<IInput[]>([]);\r\n\r\n  constructor() {}\r\n\r\n  getInput = (id: string) =>\r\n    this.StateSubject.getValue().find(({ id: _id }) => _id === id);\r\n\r\n  getValue = (id: string) => this.getInput(id)?.value;\r\n\r\n  setInput = (nextInput: IInput) => {\r\n    const prevState = this.StateSubject.getValue();\r\n    const newState = [nextInput, ...prevState].filter(\r\n      (input, i, arr) => arr.indexOf(input) === i\r\n    );\r\n    this.StateSubject.next(newState);\r\n  };\r\n}\r\n","import * as React from \"react\";\r\nimport { Observable } from \"rxjs\";\r\nimport { IInput, Service, SubmitId } from \"./service\";\r\nimport { StateSubject } from \"./state.service\";\r\nimport \"./styles.css\";\r\nimport { useSharedState } from \"./utils\";\r\nimport { InitSubject } from \"./init.service\";\r\nimport { StateService } from \"./state.refactored.service\";\r\n\r\nconst EventWrapper: React.FC = (props) => {\r\n  const children = props.children;\r\n  const childrenWithProps = React.Children.map<\r\n    React.ReactNode,\r\n    React.ReactNode\r\n  >(children, (child) => {\r\n    if (React.isValidElement(child)) {\r\n      return React.cloneElement(child, {\r\n        onClick: (e: React.MouseEvent) => {\r\n          e.preventDefault();\r\n          Service.EventSubject.next([\"click\", child.props.id, \"\"]);\r\n        },\r\n        onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\r\n          e.preventDefault();\r\n          Service.EventSubject.next([\r\n            \"change\",\r\n            child.props.id,\r\n            e?.target?.value\r\n          ]);\r\n        },\r\n        onFocus: (e: React.FocusEvent) => {\r\n          e.preventDefault();\r\n          Service.EventSubject.next([\"focus\", child.props.id, \"\"]);\r\n        }\r\n      });\r\n    }\r\n    return child;\r\n  });\r\n  return <>{childrenWithProps}</>;\r\n};\r\n\r\nconst Form = (props: { inputs: IInput[] }) => {\r\n  const { inputs } = props;\r\n  React.useEffect(() => {\r\n    InitSubject.next();\r\n  }, []);\r\n  return (\r\n    <form>\r\n      {inputs.map((input) => (\r\n        <div key={input.id} style={{ flexDirection: \"column\" }}>\r\n          <div>\r\n            <EventWrapper>\r\n              <input\r\n                disabled={input.isDisabled}\r\n                id={input.id}\r\n                value={input.value}\r\n              />\r\n            </EventWrapper>\r\n            <EventWrapper>\r\n              <button id={`${input.id}-button`}>Validate</button>\r\n            </EventWrapper>\r\n          </div>\r\n          {input.error && <p style={{ color: \"red\" }}>{input.error}</p>}\r\n        </div>\r\n      ))}\r\n      <EventWrapper>\r\n        <button id={SubmitId}>Submit</button>\r\n      </EventWrapper>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default function App() {\r\n  const [state] = useSharedState(StateService.getInstance().StateSubject);\r\n  return (\r\n    <div className=\"App\">\r\n      <Form inputs={state} />\r\n    </div>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(<App />, rootElement);\r\n"],"sourceRoot":""}